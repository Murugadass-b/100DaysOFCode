import java.util.* ;
import java.io.*; 
public class Solution {
    public static long getInversions(long arr[], int n) {
        // Write your code here.
        return mergesort(arr,0,n-1);

        
    }

    public static int mergesort(long arr[],int low,int high){
        int cnt =0;
        if(low>=high){
            return cnt;
        }
        int mid = (low+high)/2;
        cnt+=mergesort(arr,low,mid);
        cnt+=mergesort(arr,mid+1,high);
        cnt+=merge(arr,low,mid,high);
        return cnt;
    }

    public static int merge(long[] arr,int low,int mid,int high){
        int l = low;
        int r = mid+1;
        List<Long> temp = new ArrayList<>();
        int c=0;
        while(l<=mid && r<=high){
            if(arr[l]<=arr[r]){
                temp.add(arr[l]);
                l++;
            }else{
                temp.add(arr[r]);
                c+= (mid-l+1);
                r++;
            }
        }
        while(l<=mid){
            temp.add(arr[l]);
            l++;
        }

        while(r<=high){
            temp.add(arr[r]);
            r++;
        }
        for(int i=low;i<=high;i++){
            arr[i]=temp.get(i-low);
        }

        return c;



    }
}
