
Given an array ‘A’ consisting of ‘N’ integers and an integer ‘B’, find the number of subarrays of array ‘A’ whose bitwise XOR( ⊕ ) of all elements is equal to ‘B’.
A subarray of an array is obtained by removing some(zero or more) elements from the front and back of the array.
Example:
Input: ‘N’ = 4 ‘B’ = 2
‘A’ = [1, 2, 3, 2

tc: o(n^2)

code:

public class Solution {
    public static int subarraysWithSumK(int []a, int b) {
        // Write your code here
        int n = a.length;
        int c=0;
        for(int i=0;i<n;i++){
            int xor =0;
            for(int j=i;j<n;j++){
                xor = xor^a[j];
                if(xor == b){
                    c++;
                }
            }
        }
        return c;
    }
}
